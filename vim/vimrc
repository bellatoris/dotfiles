" bellator's vimrc

scriptencoding utf-8

"""""""""""""""""""""""""""""""""""""""
" 0. Load Plugin {{{
"""""""""""""""""""""""""""""""""""""""
" All the vim plugins, powered by 'vim-plug', are
" listed up in the separate file 'plugins.vim'.
" It is for making this vimrc could also work out-of-box
" even if not managed by dotfiles.
if filereadable(expand("\~/.vim/plugins.vim"))
    source \~/.vim/plugins.vim
endif

" }}}
"""""""""""""""""""""""""""""""""""""""
" 1. General Settings {{{
"""""""""""""""""""""""""""""""""""""""

syntax on
set nocompatible

" use path '~/.vim' even on non-unix machine
set runtimepath+=~/.vim

" add ~/.local/bin to $PATH
let $PATH .= ":" . expand("\~/.local/bin")

" basic displays
set number		    " show line numbers
set ruler

" input settings
set bs=indent,eol,start	    " allow backspaces over everything
set autoindent
set smartindent

set nowrap
set textwidth=0             " disable automatic line breaking
set cursorline

" tabsettings
set tabstop=8
set shiftwidth=4
set softtabstop=4

" tab navigation
set showtabline=2	    " always show tab pannel

set scrolloff=3

" search
set ignorecase		    " case-insensitive by default
set smartcase		    " case-sensitive if keyword contains both uppercase and lowercase
set incsearch
set hlsearch

" use spaces for tabbing, by default
set expandtab

" listchars for whitespaces
set list
set listchars=tab:»\ ,trail:·,extends:>,precedes:<

" wildmenu settings
set wildmenu
set wildmode=list:longest,full
set wildignore=*.swp,*.swo,*.class

" status line
set laststatus=2	    " show anytime

" native customized statusline, if airline is not available
" (this setting will be replaced afterwards by airline)
" set statusline=%1*%{winnr()}\ %*%<\ %f\ %h%m%r%=%l,%c%V\ (%P)

" mouse behaviour
set mouse=nvc
if !has('nvim')
    " vim only (not in neovim)
    set ttymouse=xterm2
endif

" encoding and line ending settings
if !has('nvim')
    set encoding=utf-8
endif
set fileencodings=utf-8,cp949,latin1
set fileformats=unix,dos

" split and autocomplete settings
set splitbelow				    " preview window at bottom
set completeopt=menuone,preview,longest	    " show preview and pop-up menu

" no fucking swap and backup files
set noswapfile
set nobackup

" set miscellaneous
set showmode
set showcmd

" lazy redraw
set lazyredraw
set ttyfast                                 " redraw fastly

" set visualbell
set history=1000
set undolevels=1000

" ctags
set tags=./tags;/

autocmd FileType scala setlocal ts=8 sts=2 sw=2

filetype plugin on
filetype indent on

" }}}
"""""""""""""""""""""""""""""""""""""""""
" 2. Keymap {{{
"""""""""""""""""""""""""""""""""""""""""
" Window management hotkeys
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    " Couldn't move, create a window
    if (t:curwin == winnr())
        " Create vertical split
        if (match(a:key,'[jk]'))
            wincmd v
        " Create horizontal split
        else
            wincmd s
        endif
        " Move to the newly created window
        exec "wincmd ".a:key
    endif
endfunction

" set a map leader for more key combos
let mapleader = ','

" shortcut to save
nmap <leader>w :w<cr>

" shortcut to quit
nmap <leader>q :q<cr>

" shortcut to savequit
nmap <leader>x :x<cr>

" set paste toggle
set pastetoggle=<leader>v

" wipout buffer
nmap <silent> <leader>bw :bw<cr>

" close current buffer
nmap <silent> <leader>bd :bp<bar>sp<bar>bn<bar>bd<cr>

" move buffer
nmap <silent> <leader>bn :bn<cr>
nmap <silent> <leader>bp :bp<cr>

" clear hilighted search
map <space> :set hlsearch! hlsearch?<cr>

" Movement in insert mode
imap <C-h> <C-o>h
imap <C-l> <C-o>a
imap <C-j> <C-o>j
imap <C-k> <C-o>k

nmap <C-w>k :call WinMove('k')<cr>
nmap <C-w>l :call WinMove('l')<cr>
nmap <C-w>j :call WinMove('j')<cr>
nmap <C-w>h :call WinMove('h')<cr>

" ctag
map <C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
nmap <C-]> g<C-]>

" search for word under the cursor
nmap <leader>/ "fyiw :/<c-r>f<cr>

" scroll the viewport faster
" nmap <C-e> 3<C-e>
" nmap <C-y> 3<C-y>

" moving up and down work as you would expect
" nmap <silent> j gj
" nmap <silent> k gk
" nmap <silent> ^ g^
" nmap <silent> $ g$

" }}}
"""""""""""""""""""""""""""""""""""""""""
" 4. Appearance (e.g. Colors, Syntax) {{{
"""""""""""""""""""""""""""""""""""""""""

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

" highlight Search        ctermfg=16
" highlight LineNr        ctermfg=248
" highlight CursorLine    cterm=none

" show cursorline for active window only
augroup NrHighlight
    autocmd!
    autocmd VimEnter,WinEnter,BufEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

" }}}

"""""""""""""""""""""""""""""""""""""""""
" 6. Plugin Setting {{{
"""""""""""""""""""""""""""""""""""""""""
" FZF {{{

if isdirectory(".git")
    " if in a git project, use :GFiles
    nmap <silent> <leader>t :GFiles<cr>
else 
    " otherwise, use :FZF
    nmap <silent> <leader>t :FZF<cr>
endif

nmap <silent> <leader>f :Ag <c-r><c-w><cr>

"------------------------------------------------------------------}}}
" Fugitive {{{

nmap <silent> <leader>gs :Gstatus<cr>
nmap <leader>ge :Gedit<cr>
nmap <silent> <leader>gr :Gread<cr>
nmap <silent> <leader>gb :Gblame<cr>
nmap <silent> <leader>gd :Gvdiff<cr>

"------------------------------------------------------------------}}}
" GV {{{

nmap <silent> <leader>gv :GV<cr>

"------------------------------------------------------------------}}}
" NerdTree {{{

" filter out some files, by extensions
let NERDTreeIgnore = ['\.pyc$', '\.class$', '\.o$']
let NERDTreeShowHidden = 1

" NERD Tree
nmap <silent> <leader>k :NERDTreeToggle<cr>
" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>

autocmd FileType nerdtree setlocal nocursorline
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"------------------------------------------------------------------}}}

" vim-easy-algin {{{

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"------------------------------------------------------------------}}}
" Airline {{{

" use airline, with powerline-ish theme
" let g:airline_theme = 'luna'
let g:airline_powerline_fonts = 1

" enable tabline feature
let g:airline#extensions#tabline#enabled = 1

" display buffers (like tabs) in the tabline
" if there is only one tab
let g:airline#extensions#tabline#show_buffers = 1

" suppress mixed-indent warning for javadoc-like comments (/** */)
let g:airline#extensions#whitespace#mixed_indent_algo = 1

"------------------------------------------------------------------}}}
" Gruvbox {{{

" setting background mode: dark or light
set background=dark

" changes dark mode contrast
let g:gruvbox_contrast_dark = 'hard'
" changes light mode contrast
let g:gruvbox_contrast_light = 'hard'

" vim colorscheme
colorscheme gruvbox

" -----------------------------------------------------------------}}}
" Tagbar {{{

nmap <silent> <leader>jo :TagbarOpen fj<cr>
nmap <silent> <leader>jc :TagbarClose<cr>

let g:tagbar_sort = 0
let g:tagbar_iconchars = ['▸', '▾']

autocmd FileType tagbar setlocal nocursorline

" -----------------------------------------------------------------}}}
" }}}
