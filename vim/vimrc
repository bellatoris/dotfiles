" bellator's vimrc

scriptencoding utf-8

"""""""""""""""""""""""""""""""""""""""
" 0. Load Plugin {{{
"""""""""""""""""""""""""""""""""""""""
" All the vim plugins, powered by 'vim-plug', are
" listed up in the separate file 'plugins.vim'.
" It is for making this vimrc could also work out-of-box
" even if not managed by dotfiles.
if filereadable(expand("\~/.vim/plugins.vim"))
    source \~/.vim/plugins.vim
endif

" }}}
"""""""""""""""""""""""""""""""""""""""
" 1. General Settings {{{
"""""""""""""""""""""""""""""""""""""""

" do not want to hear fucking bell
set novisualbell
set noerrorbells

syntax on
set nocompatible

" use path '~/.vim' even on non-unix machine
set runtimepath+=~/.vim
" add ~/.local/bin to $PATH
let $PATH .= ":" . expand("\~/.local/bin")

" basic displays
set number                  " show line numbers
set ruler

" input settings
set bs=indent,eol,start     " allow backspaces over everything
set autoindent
set smartindent

set nowrap
set textwidth=0             " disable automatic line breaking

if has("gui_vimr") || has("gui_macvim")
    set cursorline
endif

" tabsettings
set tabstop=8
set shiftwidth=4
set softtabstop=4

" tab navigation
set showtabline=2           " always show tab pannel

set scrolloff=3

" search
set ignorecase              " case-insensitive by default
set smartcase               " case-sensitive if keyword contains both uppercase and lowercase
set incsearch
set hlsearch

" use spaces for tabbing, by default
set expandtab

" use tab for tab
" set noexpandtab

" listchars for whitespaces
set list
set listchars=tab:»\ ,trail:·,extends:>,precedes:<

" wildmenu settings
set wildmenu
set wildmode=list:longest,full
set wildignore=*.swp,*.swo,*.class

" status line
set laststatus=2            " show anytime

" native customized statusline, if airline is not available
" (this setting will be replaced afterwards by airline)
" set statusline=%1*%{winnr()}\ %*%<\ %f\ %h%m%r%=%l,%c%V\ (%P)

" mouse behaviour
set mouse=nvc
if !has('nvim')
    " vim only (not in neovim)
    set ttymouse=xterm2
endif

" encoding and line ending settings
if !has('nvim')
    set encoding=utf-8
endif
set fileencodings=utf-8,cp949,latin1
set fileformats=unix,dos

" split and autocomplete settings
set splitbelow                              " preview window at bottom
set completeopt=menuone,preview,longest     " show preview and pop-up menu

" no fucking swap and backup files
set noswapfile
set nobackup

" set miscellaneous
set showmode
set showcmd

" lazy redraw
set lazyredraw
set ttyfast                                 " redraw fastly

set history=10000
set undolevels=10000

" ctags
set tags=./tags;/

autocmd FileType scala setlocal ts=8 sts=2 sw=2
autocmd FileType javascript setlocal ts=8 sts=2 sw=2
autocmd FileType typescript setlocal ts=8 sts=2 sw=2
autocmd FileType tex setlocal ts=2 sts=2 sw=2
autocmd FileType ocaml setlocal ts=2 sts=2 sw=2

filetype plugin on
filetype indent on

" python settings in macOS

if (system('uname') =~ "Darwin")
    let g:python_host_prog = "/usr/local/bin/python2"
    let g:python3_host_prog = "/usr/local/bin/python3"
endif

" }}}
"""""""""""""""""""""""""""""""""""""""""
" 2. Keymap {{{
"""""""""""""""""""""""""""""""""""""""""
" Window management hotkeys
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    " Couldn't move, create a window
    if (t:curwin == winnr())
        " Create vertical split
        if (match(a:key,'[jk]'))
            wincmd v
        " Create horizontal split
        else
            wincmd s
        endif
        " Move to the newly created window
        exec "wincmd ".a:key
    endif
endfunction

" Diff with saved file
function! DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction

" Diff Toggle
function! DiffToggle()
    if &diff
        diffoff
    else
        diffthis
    endif
endfunction

" set a map leader for more key combos
let mapleader = ','

" shortcut to save
" nmap <leader>w :w<cr>

" shorcut to quit
" nmap <leader>q :q<cr>

" shortcut to diff toggle
nmap <leader>dd :call DiffToggle()<cr>

" shortcut to diff get
nmap <leader>dg :diffget<cr>

" shortcut to savequit
" nmap <leader>x :x<cr>

" set paste toggle
set pastetoggle=<leader>v

" wipout buffer
" nmap <silent> <leader>bw :bw<cr>

" close current buffer
" nmap <silent> <leader>bd :bp<bar>sp<bar>bn<bar>bd<cr>

" move buffer
nmap <silent> <leader>bn :bn<cr>
nmap <silent> <leader>bp :bp<cr>

" Buffers
" nmap <silent> <leader>B :Buffers<cr>

" clear hilighted search
noremap <space> :set hlsearch! hlsearch?<cr>

" Movement in insert mode
" inoremap <C-h> <C-o>h
" inoremap <C-l> <C-o>a
" inoremap <C-j> <C-o>j
" inoremap <C-k> <C-o>k

" Window move
nmap <silent> <C-w>k :call WinMove('k')<cr>
nmap <silent> <C-w>l :call WinMove('l')<cr>
nmap <silent> <C-w>j :call WinMove('j')<cr>
nmap <silent> <C-w>h :call WinMove('h')<cr>

" Cursor move in autocomplete box
" inoremap <expr> j ((pumvisible())?("\<C-n>"):("j"))
" inoremap <expr> k ((pumvisible())?("\<C-p>"):("k"))

" ctag
map <C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
nmap <C-]> g<C-]>

" search for word under the cursor
nmap <leader>/ "fyiw :/<c-r>f<cr>
" search for selected word in visual mode
vmap <leader>/ y/<C-R>0<CR>

" scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

" use tcsh style command in command line
cnoremap <C-A> <Home>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>

" diff with saved file
nmap <silent> <leader>sd :call DiffWithSaved()<cr>

" }}}
"""""""""""""""""""""""""""""""""""""""""
" 4. Appearance (e.g. Colors, Syntax) {{{
"""""""""""""""""""""""""""""""""""""""""

if (system('uname') =~ "Linux")
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

if has('nvim')
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

if has("gui_vimr") || has("gui_macvim")
    " show cursorline for active window only
    augroup NrHighlight
        autocmd!
        autocmd VimEnter,WinEnter,BufEnter * setlocal cursorline
        autocmd WinLeave * setlocal nocursorline
    augroup END

    colorscheme desert
endif

if has("gui_macvim")
    set guifont=Space\ Mono\ for\ Powerline:h14
    set transparency=20
endif

" }}}

"""""""""""""""""""""""""""""""""""""""""
" 6. Plugin Setting {{{
"""""""""""""""""""""""""""""""""""""""""
" FZF {{{

if isdirectory(".git")
    " if in a git project, use :GFiles
    nmap <silent> <leader>r :GFiles<cr>
else 
    " otherwise, use :FZF
    nmap <silent> <leader>r :Files<cr>
endif

nmap <silent> <leader>f :Ag <c-r><c-w><cr>
"------------------------------------------------------------------}}}
" Fugitive {{{

nmap <silent> <leader>gs :Gstatus<cr>
nmap <silent> <leader>gr :Gread<cr>
nmap <silent> <leader>gb :Gblame<cr>
nmap <silent> <leader>gd :Gvdiff<cr>

"------------------------------------------------------------------}}}
" GV {{{

nmap <silent> <leader>gv :GV<cr>

"------------------------------------------------------------------}}}
" vim-easy-algin {{{

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"------------------------------------------------------------------}}}
" Airline {{{

" use airline, with powerline-ish theme
let g:airline_theme = 'dark'
" let g:airline_solarized_bg = 'dark'
let g:airline_powerline_fonts = 1

let g:airline#extensions#tmuxline#enabled = 0

" enable tabline feature
let g:airline#extensions#tabline#enabled = 1

" display buffers (like tabs) in the tabline
" if there is only one tab
let g:airline#extensions#tabline#show_buffers = 1

" suppress mixed-indent warning for javadoc-like comments (/** */)
let g:airline#extensions#whitespace#mixed_indent_algo = 1

"------------------------------------------------------------------}}}
" Gruvbox {{{

" if has("gui_vimr")
    " setting background mode: dark or light
    " set background=dark

    " changes dark mode contrast
    " let g:gruvbox_contrast_dark = 'soft'
    " changes light mode contrast
    " let g:gruvbox_contrast_light = 'soft'

    " vim colorscheme
    " colorscheme gruvbox
" endif

"------------------------------------------------------------------}}}
" EditorConfig {{{
let g:EditorConfig_exclude_patterns=['fugitive://.*']
"------------------------------------------------------------------}}}
" Flake8 {{{
autocmd FileType python map <buffer> <leader>p :call Flake8()<cr>
"------------------------------------------------------------------}}}
" vim-latex-preview {{{
autocmd FileType tex setl updatetime=1
let g:livepreview_previewer = 'open -a Preview'
"------------------------------------------------------------------}}}
" vimtex {{{
let g:tex_flavor = 'latex'
"------------------------------------------------------------------}}}
" Ensime {{{
nnoremap <leader>t :EnType<CR>
au FileType scala nnoremap <leader>df :EnDeclaration<CR>
"------------------------------------------------------------------}}}
" coc {{{
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=1

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use <C-p> and <C-n> to trigger completion.
inoremap <silent><expr> <C-p> coc#refresh()
inoremap <silent><expr> <C-n> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Open diagnositc
nmap <silent> <C-l> <Plug>(coc-diagnostic-info)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>n <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f <Plug>(coc-format-selected)
" nmap <leader>f <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json,rust setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <leader>di  :<C-u>CocList diagnostics<cr>
" Manage extensions.
" nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
" nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
" nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
" nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
" nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" -----------------------------------------------------------------}}}
" }}}
